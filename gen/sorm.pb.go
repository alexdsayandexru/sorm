// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: sorm.proto

package sorm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **********************************************************************************************************************
type Msisdn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msisdn string `protobuf:"bytes,1,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
}

func (x *Msisdn) Reset() {
	*x = Msisdn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msisdn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msisdn) ProtoMessage() {}

func (x *Msisdn) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msisdn.ProtoReflect.Descriptor instead.
func (*Msisdn) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{0}
}

func (x *Msisdn) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{1}
}

func (x *Email) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Add struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Add) Reset() {
	*x = Add{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Add) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Add) ProtoMessage() {}

func (x *Add) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Add.ProtoReflect.Descriptor instead.
func (*Add) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{2}
}

func (x *Add) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Add) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ImId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceId   string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *ImId) Reset() {
	*x = ImId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImId) ProtoMessage() {}

func (x *ImId) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImId.ProtoReflect.Descriptor instead.
func (*ImId) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{3}
}

func (x *ImId) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ImId) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

// **********************************************************************************************************************
type RegisterUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId string    `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // Уникальный идентификатор события
	TelcoId       int32     `protobuf:"varint,2,opt,name=telco_id,json=telcoId,proto3" json:"telco_id,omitempty"`                  // Идентификатор Газпром ИД
	UserType      int32     `protobuf:"varint,3,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`               // Тип пользователя
	UserId        string    `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                      // Уникальный идентификатор пользователя
	ServiceId     int32     `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`            // Идентификатор сервиса
	Ip            string    `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`                                            // IP-адрес пользователя
	Port          int32     `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`                                       // Порт
	UserAgent     string    `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`             // Прочая техническая информация User_agent
	Datetime      string    `protobuf:"bytes,9,opt,name=datetime,proto3" json:"datetime,omitempty"`                                // Дата и время наступления события
	Msisdns       []*Msisdn `protobuf:"bytes,10,rep,name=msisdns,proto3" json:"msisdns,omitempty"`                                 // Список номеров телефона
	DatetimeReg   string    `protobuf:"bytes,11,opt,name=datetime_reg,json=datetimeReg,proto3" json:"datetime_reg,omitempty"`      // Дата и время регистрации пользователя
	Emails        []*Email  `protobuf:"bytes,12,rep,name=emails,proto3" json:"emails,omitempty"`                                   // Список email
	ServiceUser   int32     `protobuf:"varint,13,opt,name=service_user,json=serviceUser,proto3" json:"service_user,omitempty"`     // Идентификатор Газпром ID
	Additional    []*Add    `protobuf:"bytes,14,rep,name=additional,proto3" json:"additional,omitempty"`                           // Список дополнительных данных о пользователе
	ContractDate  string    `protobuf:"bytes,15,opt,name=contract_date,json=contractDate,proto3" json:"contract_date,omitempty"`   // Дата и время согласия с пользовательским соглашением
	MsisdnLogin   string    `protobuf:"bytes,16,opt,name=msisdn_login,json=msisdnLogin,proto3" json:"msisdn_login,omitempty"`      // Номер телефона, по которому пользователь аутентифицирован
	EmailLogin    string    `protobuf:"bytes,17,opt,name=email_login,json=emailLogin,proto3" json:"email_login,omitempty"`         // Email, по которому пользователь аутентифицирован
	Message       string    `protobuf:"bytes,18,opt,name=message,proto3" json:"message,omitempty"`                                 // текст сообщения без разметки и иной служебной коммуникационной информации;
}

func (x *RegisterUserRequest) Reset() {
	*x = RegisterUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserRequest) ProtoMessage() {}

func (x *RegisterUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserRequest.ProtoReflect.Descriptor instead.
func (*RegisterUserRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterUserRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *RegisterUserRequest) GetTelcoId() int32 {
	if x != nil {
		return x.TelcoId
	}
	return 0
}

func (x *RegisterUserRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *RegisterUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RegisterUserRequest) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *RegisterUserRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RegisterUserRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RegisterUserRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *RegisterUserRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *RegisterUserRequest) GetMsisdns() []*Msisdn {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *RegisterUserRequest) GetDatetimeReg() string {
	if x != nil {
		return x.DatetimeReg
	}
	return ""
}

func (x *RegisterUserRequest) GetEmails() []*Email {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *RegisterUserRequest) GetServiceUser() int32 {
	if x != nil {
		return x.ServiceUser
	}
	return 0
}

func (x *RegisterUserRequest) GetAdditional() []*Add {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *RegisterUserRequest) GetContractDate() string {
	if x != nil {
		return x.ContractDate
	}
	return ""
}

func (x *RegisterUserRequest) GetMsisdnLogin() string {
	if x != nil {
		return x.MsisdnLogin
	}
	return ""
}

func (x *RegisterUserRequest) GetEmailLogin() string {
	if x != nil {
		return x.EmailLogin
	}
	return ""
}

func (x *RegisterUserRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// **********************************************************************************************************************
type LoginUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId string `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // Уникальный идентификатор события
	TelcoId       int32  `protobuf:"varint,2,opt,name=telco_id,json=telcoId,proto3" json:"telco_id,omitempty"`                  // Идентификатор Газпром ИД
	UserType      int32  `protobuf:"varint,3,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`               // Тип пользователя
	UserId        string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                      // Уникальный идентификатор пользователя
	ServiceId     int32  `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`            // Идентификатор сервиса
	Ip            string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`                                            // IP-адрес пользователя
	Port          int32  `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`                                       // Порт
	UserAgent     string `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`             // Прочая техническая информация User_agent
	Factor        string `protobuf:"bytes,9,opt,name=factor,proto3" json:"factor,omitempty"`                                    // Тип входа
	Datetime      string `protobuf:"bytes,10,opt,name=datetime,proto3" json:"datetime,omitempty"`                               // Дата и время наступления события
	MsisdnLogin   string `protobuf:"bytes,11,opt,name=msisdn_login,json=msisdnLogin,proto3" json:"msisdn_login,omitempty"`      // номер телефона
	EmailLogin    string `protobuf:"bytes,12,opt,name=email_login,json=emailLogin,proto3" json:"email_login,omitempty"`         // email
}

func (x *LoginUserRequest) Reset() {
	*x = LoginUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginUserRequest) ProtoMessage() {}

func (x *LoginUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginUserRequest.ProtoReflect.Descriptor instead.
func (*LoginUserRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{5}
}

func (x *LoginUserRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *LoginUserRequest) GetTelcoId() int32 {
	if x != nil {
		return x.TelcoId
	}
	return 0
}

func (x *LoginUserRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *LoginUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoginUserRequest) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *LoginUserRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LoginUserRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LoginUserRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *LoginUserRequest) GetFactor() string {
	if x != nil {
		return x.Factor
	}
	return ""
}

func (x *LoginUserRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *LoginUserRequest) GetMsisdnLogin() string {
	if x != nil {
		return x.MsisdnLogin
	}
	return ""
}

func (x *LoginUserRequest) GetEmailLogin() string {
	if x != nil {
		return x.EmailLogin
	}
	return ""
}

// **********************************************************************************************************************
type LogoutUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId string `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // Уникальный идентификатор события
	TelcoId       int32  `protobuf:"varint,2,opt,name=telco_id,json=telcoId,proto3" json:"telco_id,omitempty"`                  // Идентификатор Газпром ИД
	UserType      int32  `protobuf:"varint,3,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`               // Тип пользователя
	UserId        string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                      // Уникальный идентификатор пользователя
	ServiceId     int32  `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`            // Идентификатор сервиса
	Ip            string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`                                            // IP-адрес пользователя
	Port          int32  `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`                                       // Порт
	UserAgent     string `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`             // Прочая техническая информация User_agent
	Datetime      string `protobuf:"bytes,9,opt,name=datetime,proto3" json:"datetime,omitempty"`                                // Дата и время наступления события
}

func (x *LogoutUserRequest) Reset() {
	*x = LogoutUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutUserRequest) ProtoMessage() {}

func (x *LogoutUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutUserRequest.ProtoReflect.Descriptor instead.
func (*LogoutUserRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{6}
}

func (x *LogoutUserRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *LogoutUserRequest) GetTelcoId() int32 {
	if x != nil {
		return x.TelcoId
	}
	return 0
}

func (x *LogoutUserRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *LogoutUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LogoutUserRequest) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *LogoutUserRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LogoutUserRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LogoutUserRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *LogoutUserRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

// **********************************************************************************************************************
type DeleteUserAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId string `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // Уникальный идентификатор события
	TelcoId       int32  `protobuf:"varint,2,opt,name=telco_id,json=telcoId,proto3" json:"telco_id,omitempty"`                  // Идентификатор Газпром ИД
	UserType      int32  `protobuf:"varint,3,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`               // Тип пользователя
	UserId        string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                      // Уникальный идентификатор пользователя
	ServiceId     int32  `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`            // Идентификатор сервиса
	Ip            string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`                                            // IP-адрес пользователя
	Port          int32  `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`                                       // Порт
	UserAgent     string `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`             // Прочая техническая информация User_agent
	Datetime      string `protobuf:"bytes,9,opt,name=datetime,proto3" json:"datetime,omitempty"`                                // Дата и время наступления события
	Message       string `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`                                 // текст сообщения без разметки и иной служебной коммуникационной информации
}

func (x *DeleteUserAccountRequest) Reset() {
	*x = DeleteUserAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserAccountRequest) ProtoMessage() {}

func (x *DeleteUserAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserAccountRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteUserAccountRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *DeleteUserAccountRequest) GetTelcoId() int32 {
	if x != nil {
		return x.TelcoId
	}
	return 0
}

func (x *DeleteUserAccountRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *DeleteUserAccountRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteUserAccountRequest) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *DeleteUserAccountRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeleteUserAccountRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeleteUserAccountRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *DeleteUserAccountRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *DeleteUserAccountRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// **********************************************************************************************************************
type UpdateUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId   string    `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`        // Уникальный идентификатор события
	TelcoId         int32     `protobuf:"varint,2,opt,name=telco_id,json=telcoId,proto3" json:"telco_id,omitempty"`                         // Идентификатор Газпром ИД
	UserType        int32     `protobuf:"varint,3,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`                      // Тип пользователя
	UserId          string    `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                             // Уникальный идентификатор пользователя
	ServiceId       int32     `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                   // Идентификатор сервиса
	Ip              string    `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`                                                   // IP-адрес пользователя
	Port            int32     `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`                                              // Порт
	UserAgent       string    `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`                    // Прочая техническая информация User_agent
	Datetime        string    `protobuf:"bytes,9,opt,name=datetime,proto3" json:"datetime,omitempty"`                                       // Дата и время наступления события
	Msisdns         []*Msisdn `protobuf:"bytes,10,rep,name=msisdns,proto3" json:"msisdns,omitempty"`                                        // Список номеров телефона
	DatetimeReg     string    `protobuf:"bytes,11,opt,name=datetime_reg,json=datetimeReg,proto3" json:"datetime_reg,omitempty"`             // Дата и время регистрации пользователя
	DatetimeUpdated string    `protobuf:"bytes,12,opt,name=datetime_updated,json=datetimeUpdated,proto3" json:"datetime_updated,omitempty"` // Дата и время обновления данных пользователя
	Emails          []*Email  `protobuf:"bytes,13,rep,name=emails,proto3" json:"emails,omitempty"`                                          // Список email
	ServiceUser     int32     `protobuf:"varint,14,opt,name=service_user,json=serviceUser,proto3" json:"service_user,omitempty"`            // Идентификатор Газпром ID
	Additional      []*Add    `protobuf:"bytes,15,rep,name=additional,proto3" json:"additional,omitempty"`                                  // Список дополнительных данных о пользователе
	ContractDate    string    `protobuf:"bytes,16,opt,name=contract_date,json=contractDate,proto3" json:"contract_date,omitempty"`          // Дата и время согласия с пользовательским соглашением
	Nick            string    `protobuf:"bytes,17,opt,name=nick,proto3" json:"nick,omitempty"`                                              // Никнейм пользователя
	BirthDate       string    `protobuf:"bytes,18,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`                   // Дата рождения пользователя
	Name            string    `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`                                              // Имя пользователя
	Family          string    `protobuf:"bytes,20,opt,name=family,proto3" json:"family,omitempty"`                                          // Фамилия пользователя
	Initial         string    `protobuf:"bytes,21,opt,name=initial,proto3" json:"initial,omitempty"`                                        // Отчество пользователя
	Address         string    `protobuf:"bytes,22,opt,name=address,proto3" json:"address,omitempty"`                                        // Город
	ImIds           []*ImId   `protobuf:"bytes,23,rep,name=im_ids,json=imIds,proto3" json:"im_ids,omitempty"`                               // Список УЗ пользователя во внешних сервисах
	Message         string    `protobuf:"bytes,24,opt,name=message,proto3" json:"message,omitempty"`                                        // текст сообщения без разметки и иной служебной коммуникационной информации
}

func (x *UpdateUserDataRequest) Reset() {
	*x = UpdateUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDataRequest) ProtoMessage() {}

func (x *UpdateUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserDataRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateUserDataRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *UpdateUserDataRequest) GetTelcoId() int32 {
	if x != nil {
		return x.TelcoId
	}
	return 0
}

func (x *UpdateUserDataRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *UpdateUserDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserDataRequest) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *UpdateUserDataRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UpdateUserDataRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *UpdateUserDataRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *UpdateUserDataRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *UpdateUserDataRequest) GetMsisdns() []*Msisdn {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *UpdateUserDataRequest) GetDatetimeReg() string {
	if x != nil {
		return x.DatetimeReg
	}
	return ""
}

func (x *UpdateUserDataRequest) GetDatetimeUpdated() string {
	if x != nil {
		return x.DatetimeUpdated
	}
	return ""
}

func (x *UpdateUserDataRequest) GetEmails() []*Email {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *UpdateUserDataRequest) GetServiceUser() int32 {
	if x != nil {
		return x.ServiceUser
	}
	return 0
}

func (x *UpdateUserDataRequest) GetAdditional() []*Add {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *UpdateUserDataRequest) GetContractDate() string {
	if x != nil {
		return x.ContractDate
	}
	return ""
}

func (x *UpdateUserDataRequest) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *UpdateUserDataRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *UpdateUserDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUserDataRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *UpdateUserDataRequest) GetInitial() string {
	if x != nil {
		return x.Initial
	}
	return ""
}

func (x *UpdateUserDataRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateUserDataRequest) GetImIds() []*ImId {
	if x != nil {
		return x.ImIds
	}
	return nil
}

func (x *UpdateUserDataRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// **********************************************************************************************************************
type DeleteUserAccountAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId   string    `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`        // Уникальный идентификатор события
	TelcoId         int32     `protobuf:"varint,2,opt,name=telco_id,json=telcoId,proto3" json:"telco_id,omitempty"`                         // Идентификатор Газпром ИД
	UserType        int32     `protobuf:"varint,3,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`                      // Тип пользователя
	UserId          string    `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                             // Уникальный идентификатор пользователя
	ServiceId       int32     `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                   // Идентификатор сервиса
	Datetime        string    `protobuf:"bytes,6,opt,name=datetime,proto3" json:"datetime,omitempty"`                                       // Дата и время наступления события
	Msisdns         []*Msisdn `protobuf:"bytes,7,rep,name=msisdns,proto3" json:"msisdns,omitempty"`                                         // Список номеров телефона
	DatetimeReg     string    `protobuf:"bytes,8,opt,name=datetime_reg,json=datetimeReg,proto3" json:"datetime_reg,omitempty"`              // Дата и время регистрации пользователя
	Emails          []*Email  `protobuf:"bytes,9,rep,name=emails,proto3" json:"emails,omitempty"`                                           // Список email
	DatetimeUpdated string    `protobuf:"bytes,10,opt,name=datetime_updated,json=datetimeUpdated,proto3" json:"datetime_updated,omitempty"` // Дата и время обновления данных пользователя
	ServiceUser     int32     `protobuf:"varint,11,opt,name=service_user,json=serviceUser,proto3" json:"service_user,omitempty"`            // Идентификатор Газпром ID
	Additional      []*Add    `protobuf:"bytes,12,rep,name=additional,proto3" json:"additional,omitempty"`                                  // Список дополнительных данных о пользователе
	ContractDate    string    `protobuf:"bytes,13,opt,name=contract_date,json=contractDate,proto3" json:"contract_date,omitempty"`          // Дата и время согласия с пользовательским соглашением
	Nick            string    `protobuf:"bytes,14,opt,name=nick,proto3" json:"nick,omitempty"`                                              // Никнейм пользователя
	BirthDate       string    `protobuf:"bytes,15,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`                   // Дата рождения пользователя
	Name            string    `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`                                              // Имя пользователя
	Family          string    `protobuf:"bytes,17,opt,name=family,proto3" json:"family,omitempty"`                                          // Фамилия пользователя
	Initial         string    `protobuf:"bytes,18,opt,name=initial,proto3" json:"initial,omitempty"`                                        // Отчество пользователя
	Address         string    `protobuf:"bytes,19,opt,name=address,proto3" json:"address,omitempty"`                                        // Город
	ImIds           []*ImId   `protobuf:"bytes,20,rep,name=im_ids,json=imIds,proto3" json:"im_ids,omitempty"`                               // Список УЗ пользователя во внешних сервисах
	DatetimeUnreg   string    `protobuf:"bytes,21,opt,name=datetime_unreg,json=datetimeUnreg,proto3" json:"datetime_unreg,omitempty"`       // Дата и удаления пользователя
}

func (x *DeleteUserAccountAdminRequest) Reset() {
	*x = DeleteUserAccountAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserAccountAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserAccountAdminRequest) ProtoMessage() {}

func (x *DeleteUserAccountAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserAccountAdminRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserAccountAdminRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteUserAccountAdminRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetTelcoId() int32 {
	if x != nil {
		return x.TelcoId
	}
	return 0
}

func (x *DeleteUserAccountAdminRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *DeleteUserAccountAdminRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *DeleteUserAccountAdminRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetMsisdns() []*Msisdn {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *DeleteUserAccountAdminRequest) GetDatetimeReg() string {
	if x != nil {
		return x.DatetimeReg
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetEmails() []*Email {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *DeleteUserAccountAdminRequest) GetDatetimeUpdated() string {
	if x != nil {
		return x.DatetimeUpdated
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetServiceUser() int32 {
	if x != nil {
		return x.ServiceUser
	}
	return 0
}

func (x *DeleteUserAccountAdminRequest) GetAdditional() []*Add {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *DeleteUserAccountAdminRequest) GetContractDate() string {
	if x != nil {
		return x.ContractDate
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetInitial() string {
	if x != nil {
		return x.Initial
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DeleteUserAccountAdminRequest) GetImIds() []*ImId {
	if x != nil {
		return x.ImIds
	}
	return nil
}

func (x *DeleteUserAccountAdminRequest) GetDatetimeUnreg() string {
	if x != nil {
		return x.DatetimeUnreg
	}
	return ""
}

// **********************************************************************************************************************
type UpdateUserDataAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId   string    `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`        // Уникальный идентификатор события
	TelcoId         int32     `protobuf:"varint,2,opt,name=telco_id,json=telcoId,proto3" json:"telco_id,omitempty"`                         // Идентификатор Газпром ИД
	UserType        int32     `protobuf:"varint,3,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`                      // Тип пользователя
	UserId          string    `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                             // Уникальный идентификатор пользователя
	ServiceId       int32     `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                   // Идентификатор сервиса
	Datetime        string    `protobuf:"bytes,6,opt,name=datetime,proto3" json:"datetime,omitempty"`                                       // Дата и время наступления события
	Msisdns         []*Msisdn `protobuf:"bytes,7,rep,name=msisdns,proto3" json:"msisdns,omitempty"`                                         // Список номеров телефона
	DatetimeReg     string    `protobuf:"bytes,8,opt,name=datetime_reg,json=datetimeReg,proto3" json:"datetime_reg,omitempty"`              // Дата и время регистрации пользователя
	Emails          []*Email  `protobuf:"bytes,9,rep,name=emails,proto3" json:"emails,omitempty"`                                           // Список email
	DatetimeUpdated string    `protobuf:"bytes,10,opt,name=datetime_updated,json=datetimeUpdated,proto3" json:"datetime_updated,omitempty"` // Дата и время обновления данных пользователя
	ServiceUser     int32     `protobuf:"varint,11,opt,name=service_user,json=serviceUser,proto3" json:"service_user,omitempty"`            //  Идентификатор Газпром ID
	Additional      []*Add    `protobuf:"bytes,12,rep,name=additional,proto3" json:"additional,omitempty"`                                  // Список дополнительных данных о пользователе
	ContractDate    string    `protobuf:"bytes,13,opt,name=contract_date,json=contractDate,proto3" json:"contract_date,omitempty"`          // Дата и время согласия с пользовательским соглашением
	Nick            string    `protobuf:"bytes,14,opt,name=nick,proto3" json:"nick,omitempty"`                                              // Никнейм пользователя
	BirthDate       string    `protobuf:"bytes,15,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`                   // Дата рождения пользователя
	Name            string    `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`                                              // Имя пользователя
	Family          string    `protobuf:"bytes,17,opt,name=family,proto3" json:"family,omitempty"`                                          // Фамилия пользователя
	Initial         string    `protobuf:"bytes,18,opt,name=initial,proto3" json:"initial,omitempty"`                                        // Отчество пользователя
	Address         string    `protobuf:"bytes,19,opt,name=address,proto3" json:"address,omitempty"`                                        // Город
	ImIds           []*ImId   `protobuf:"bytes,20,rep,name=im_ids,json=imIds,proto3" json:"im_ids,omitempty"`                               // Список УЗ пользователя во внешних сервисах
	Message         string    `protobuf:"bytes,21,opt,name=message,proto3" json:"message,omitempty"`                                        // текст сообщения без разметки и иной служебной коммуникационной информации
}

func (x *UpdateUserDataAdminRequest) Reset() {
	*x = UpdateUserDataAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDataAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDataAdminRequest) ProtoMessage() {}

func (x *UpdateUserDataAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDataAdminRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserDataAdminRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateUserDataAdminRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetTelcoId() int32 {
	if x != nil {
		return x.TelcoId
	}
	return 0
}

func (x *UpdateUserDataAdminRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *UpdateUserDataAdminRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *UpdateUserDataAdminRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetMsisdns() []*Msisdn {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *UpdateUserDataAdminRequest) GetDatetimeReg() string {
	if x != nil {
		return x.DatetimeReg
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetEmails() []*Email {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *UpdateUserDataAdminRequest) GetDatetimeUpdated() string {
	if x != nil {
		return x.DatetimeUpdated
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetServiceUser() int32 {
	if x != nil {
		return x.ServiceUser
	}
	return 0
}

func (x *UpdateUserDataAdminRequest) GetAdditional() []*Add {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *UpdateUserDataAdminRequest) GetContractDate() string {
	if x != nil {
		return x.ContractDate
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetInitial() string {
	if x != nil {
		return x.Initial
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateUserDataAdminRequest) GetImIds() []*ImId {
	if x != nil {
		return x.ImIds
	}
	return nil
}

func (x *UpdateUserDataAdminRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// **********************************************************************************************************************
type DeleteAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId   string    `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`       // Уникальный идентификатор события
	TelcoId         int32     `protobuf:"varint,2,opt,name=telco_id,json=telcoId,proto3" json:"telco_id,omitempty"`                        // Идентификатор Газпром ИД
	UserType        int32     `protobuf:"varint,3,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`                     // Тип пользователя
	UserId          string    `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                            // Уникальный идентификатор пользователя
	Msisdns         []*Msisdn `protobuf:"bytes,5,rep,name=msisdns,proto3" json:"msisdns,omitempty"`                                        // Список номеров телефона
	DatetimeReg     string    `protobuf:"bytes,6,opt,name=datetime_reg,json=datetimeReg,proto3" json:"datetime_reg,omitempty"`             // Дата и время регистрации пользователя
	DatetimeUpdated string    `protobuf:"bytes,7,opt,name=datetime_updated,json=datetimeUpdated,proto3" json:"datetime_updated,omitempty"` // Дата и время обновления данных пользователя
	Emails          []*Email  `protobuf:"bytes,8,rep,name=emails,proto3" json:"emails,omitempty"`                                          // Список email
	ServiceUser     int32     `protobuf:"varint,9,opt,name=service_user,json=serviceUser,proto3" json:"service_user,omitempty"`            // Идентификатор Газпром ID
	Additional      []*Add    `protobuf:"bytes,10,rep,name=additional,proto3" json:"additional,omitempty"`                                 // Список дополнительных данных о пользователе
	ContractDate    string    `protobuf:"bytes,11,opt,name=contract_date,json=contractDate,proto3" json:"contract_date,omitempty"`         // Дата и время согласия с пользовательским соглашением
	Nick            string    `protobuf:"bytes,12,opt,name=nick,proto3" json:"nick,omitempty"`                                             // Никнейм пользователя
	BirthDate       string    `protobuf:"bytes,13,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`                  // Дата рождения пользователя
	Name            string    `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`                                             // Имя пользователя
	Family          string    `protobuf:"bytes,15,opt,name=family,proto3" json:"family,omitempty"`                                         // Фамилия пользователя
	Initial         string    `protobuf:"bytes,16,opt,name=initial,proto3" json:"initial,omitempty"`                                       // Отчество пользователя
	Address         string    `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`                                       // Город
	ImIds           []*ImId   `protobuf:"bytes,18,rep,name=im_ids,json=imIds,proto3" json:"im_ids,omitempty"`                              // Список УЗ пользователя во внешних сервисах
	DatetimeUnreg   string    `protobuf:"bytes,19,opt,name=datetime_unreg,json=datetimeUnreg,proto3" json:"datetime_unreg,omitempty"`      // Дата время и удаления пользователя
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteAccountRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *DeleteAccountRequest) GetTelcoId() int32 {
	if x != nil {
		return x.TelcoId
	}
	return 0
}

func (x *DeleteAccountRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *DeleteAccountRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteAccountRequest) GetMsisdns() []*Msisdn {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *DeleteAccountRequest) GetDatetimeReg() string {
	if x != nil {
		return x.DatetimeReg
	}
	return ""
}

func (x *DeleteAccountRequest) GetDatetimeUpdated() string {
	if x != nil {
		return x.DatetimeUpdated
	}
	return ""
}

func (x *DeleteAccountRequest) GetEmails() []*Email {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *DeleteAccountRequest) GetServiceUser() int32 {
	if x != nil {
		return x.ServiceUser
	}
	return 0
}

func (x *DeleteAccountRequest) GetAdditional() []*Add {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *DeleteAccountRequest) GetContractDate() string {
	if x != nil {
		return x.ContractDate
	}
	return ""
}

func (x *DeleteAccountRequest) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *DeleteAccountRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *DeleteAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteAccountRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *DeleteAccountRequest) GetInitial() string {
	if x != nil {
		return x.Initial
	}
	return ""
}

func (x *DeleteAccountRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DeleteAccountRequest) GetImIds() []*ImId {
	if x != nil {
		return x.ImIds
	}
	return nil
}

func (x *DeleteAccountRequest) GetDatetimeUnreg() string {
	if x != nil {
		return x.DatetimeUnreg
	}
	return ""
}

// **********************************************************************************************************************
type UserAccountRecoveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId string `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // Уникальный идентификатор события
	TelcoId       int32  `protobuf:"varint,2,opt,name=telco_id,json=telcoId,proto3" json:"telco_id,omitempty"`                  // Идентификатор Газпром ИД
	UserType      int32  `protobuf:"varint,3,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`               // Тип пользователя
	UserId        string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                      // Уникальный идентификатор пользователя
	ServiceId     int32  `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`            // Идентификатор сервиса
	Ip            string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`                                            // IP-адрес пользователя
	Port          int32  `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`                                       // Порт
	UserAgent     string `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`             // Прочая техническая информация User_agent
	Datetime      string `protobuf:"bytes,9,opt,name=datetime,proto3" json:"datetime,omitempty"`                                // Дата и время наступления события
	MsisdnLogin   string `protobuf:"bytes,10,opt,name=msisdn_login,json=msisdnLogin,proto3" json:"msisdn_login,omitempty"`      //  номер телефона
	EmailLogin    string `protobuf:"bytes,11,opt,name=email_login,json=emailLogin,proto3" json:"email_login,omitempty"`         // email
}

func (x *UserAccountRecoveryRequest) Reset() {
	*x = UserAccountRecoveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountRecoveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountRecoveryRequest) ProtoMessage() {}

func (x *UserAccountRecoveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountRecoveryRequest.ProtoReflect.Descriptor instead.
func (*UserAccountRecoveryRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{12}
}

func (x *UserAccountRecoveryRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *UserAccountRecoveryRequest) GetTelcoId() int32 {
	if x != nil {
		return x.TelcoId
	}
	return 0
}

func (x *UserAccountRecoveryRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *UserAccountRecoveryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAccountRecoveryRequest) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *UserAccountRecoveryRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserAccountRecoveryRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *UserAccountRecoveryRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *UserAccountRecoveryRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *UserAccountRecoveryRequest) GetMsisdnLogin() string {
	if x != nil {
		return x.MsisdnLogin
	}
	return ""
}

func (x *UserAccountRecoveryRequest) GetEmailLogin() string {
	if x != nil {
		return x.EmailLogin
	}
	return ""
}

// **********************************************************************************************************************
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId  int32  `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"` // Уникальный идентификатор сервиса
	Decription string `protobuf:"bytes,2,opt,name=decription,proto3" json:"decription,omitempty"`                 // Название сервиса
	BeginTime  string `protobuf:"bytes,3,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`  // Дата создания сервиса
	EndTime    string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`        // Дата удаления/изменения сервиса
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{13}
}

func (x *Service) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *Service) GetDecription() string {
	if x != nil {
		return x.Decription
	}
	return ""
}

func (x *Service) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *Service) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type DirectoryDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId string     `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // Уникальный идентификатор события
	Datetime      string     `protobuf:"bytes,2,opt,name=datetime,proto3" json:"datetime,omitempty"`                                // Дата и время наступления события
	Services      []*Service `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`                                // Список сервисов
}

func (x *DirectoryDataRequest) Reset() {
	*x = DirectoryDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryDataRequest) ProtoMessage() {}

func (x *DirectoryDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryDataRequest.ProtoReflect.Descriptor instead.
func (*DirectoryDataRequest) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{14}
}

func (x *DirectoryDataRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *DirectoryDataRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *DirectoryDataRequest) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

// **********************************************************************************************************************
type DataManagementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // gRPC код ошибки
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Сообщение об ошибке или подтверждение успеха
	Details []*anypb.Any `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"` // Детальная информация об ошибке
}

func (x *DataManagementResponse) Reset() {
	*x = DataManagementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sorm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataManagementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataManagementResponse) ProtoMessage() {}

func (x *DataManagementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sorm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataManagementResponse.ProtoReflect.Descriptor instead.
func (*DataManagementResponse) Descriptor() ([]byte, []int) {
	return file_sorm_proto_rawDescGZIP(), []int{15}
}

func (x *DataManagementResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DataManagementResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DataManagementResponse) GetDetails() []*anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_sorm_proto protoreflect.FileDescriptor

var file_sorm_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x73, 0x6f,
	0x72, 0x6d, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a,
	0x06, 0x4d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x22,
	0x1d, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x35,
	0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x05, 0x49, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xcc, 0x04, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x4d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x52, 0x07, 0x6d,
	0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6f, 0x72, 0x6d,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x64, 0x64,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xe4, 0x02, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x6c, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x65, 0x6c, 0x63, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xec, 0x05, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x4d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x52, 0x07,
	0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x0a, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x22, 0x0a, 0x06, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6d, 0x5f, 0x69, 0x64, 0x52, 0x05, 0x69,
	0x6d, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbe,
	0x05, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x63, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x63, 0x6f,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x4d, 0x73, 0x69, 0x73,
	0x64, 0x6e, 0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x12, 0x23,
	0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x64, 0x64,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6d, 0x5f, 0x69,
	0x64, 0x52, 0x05, 0x69, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x22,
	0xae, 0x05, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x4d, 0x73, 0x69, 0x73, 0x64, 0x6e,
	0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x12, 0x23, 0x0a, 0x06,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x6f, 0x72, 0x6d, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6d, 0x5f, 0x69, 0x64, 0x52,
	0x05, 0x69, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xfa, 0x04, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x4d, 0x73, 0x69, 0x73, 0x64, 0x6e,
	0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6d, 0x5f, 0x69, 0x64, 0x52,
	0x05, 0x69, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x22, 0xd6, 0x02,
	0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x14,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6f, 0x72, 0x6d,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x76, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xa6, 0x06, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x19, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73,
	0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x73, 0x6f,
	0x72, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x23, 0x2e, 0x73,
	0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x20, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x72,
	0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x73, 0x6f, 0x72, 0x6d,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6c, 0x65, 0x78, 0x64, 0x73, 0x61, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x72,
	0x75, 0x2f, 0x73, 0x6f, 0x72, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x3b, 0x73, 0x6f, 0x72, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sorm_proto_rawDescOnce sync.Once
	file_sorm_proto_rawDescData = file_sorm_proto_rawDesc
)

func file_sorm_proto_rawDescGZIP() []byte {
	file_sorm_proto_rawDescOnce.Do(func() {
		file_sorm_proto_rawDescData = protoimpl.X.CompressGZIP(file_sorm_proto_rawDescData)
	})
	return file_sorm_proto_rawDescData
}

var file_sorm_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_sorm_proto_goTypes = []interface{}{
	(*Msisdn)(nil),                        // 0: sorm.Msisdn
	(*Email)(nil),                         // 1: sorm.Email
	(*Add)(nil),                           // 2: sorm.Add
	(*ImId)(nil),                          // 3: sorm.Im_id
	(*RegisterUserRequest)(nil),           // 4: sorm.RegisterUserRequest
	(*LoginUserRequest)(nil),              // 5: sorm.LoginUserRequest
	(*LogoutUserRequest)(nil),             // 6: sorm.LogoutUserRequest
	(*DeleteUserAccountRequest)(nil),      // 7: sorm.DeleteUserAccountRequest
	(*UpdateUserDataRequest)(nil),         // 8: sorm.UpdateUserDataRequest
	(*DeleteUserAccountAdminRequest)(nil), // 9: sorm.DeleteUserAccountAdminRequest
	(*UpdateUserDataAdminRequest)(nil),    // 10: sorm.UpdateUserDataAdminRequest
	(*DeleteAccountRequest)(nil),          // 11: sorm.DeleteAccountRequest
	(*UserAccountRecoveryRequest)(nil),    // 12: sorm.UserAccountRecoveryRequest
	(*Service)(nil),                       // 13: sorm.Service
	(*DirectoryDataRequest)(nil),          // 14: sorm.DirectoryDataRequest
	(*DataManagementResponse)(nil),        // 15: sorm.DataManagementResponse
	(*anypb.Any)(nil),                     // 16: google.protobuf.Any
}
var file_sorm_proto_depIdxs = []int32{
	0,  // 0: sorm.RegisterUserRequest.msisdns:type_name -> sorm.Msisdn
	1,  // 1: sorm.RegisterUserRequest.emails:type_name -> sorm.Email
	2,  // 2: sorm.RegisterUserRequest.additional:type_name -> sorm.Add
	0,  // 3: sorm.UpdateUserDataRequest.msisdns:type_name -> sorm.Msisdn
	1,  // 4: sorm.UpdateUserDataRequest.emails:type_name -> sorm.Email
	2,  // 5: sorm.UpdateUserDataRequest.additional:type_name -> sorm.Add
	3,  // 6: sorm.UpdateUserDataRequest.im_ids:type_name -> sorm.Im_id
	0,  // 7: sorm.DeleteUserAccountAdminRequest.msisdns:type_name -> sorm.Msisdn
	1,  // 8: sorm.DeleteUserAccountAdminRequest.emails:type_name -> sorm.Email
	2,  // 9: sorm.DeleteUserAccountAdminRequest.additional:type_name -> sorm.Add
	3,  // 10: sorm.DeleteUserAccountAdminRequest.im_ids:type_name -> sorm.Im_id
	0,  // 11: sorm.UpdateUserDataAdminRequest.msisdns:type_name -> sorm.Msisdn
	1,  // 12: sorm.UpdateUserDataAdminRequest.emails:type_name -> sorm.Email
	2,  // 13: sorm.UpdateUserDataAdminRequest.additional:type_name -> sorm.Add
	3,  // 14: sorm.UpdateUserDataAdminRequest.im_ids:type_name -> sorm.Im_id
	0,  // 15: sorm.DeleteAccountRequest.msisdns:type_name -> sorm.Msisdn
	1,  // 16: sorm.DeleteAccountRequest.emails:type_name -> sorm.Email
	2,  // 17: sorm.DeleteAccountRequest.additional:type_name -> sorm.Add
	3,  // 18: sorm.DeleteAccountRequest.im_ids:type_name -> sorm.Im_id
	13, // 19: sorm.DirectoryDataRequest.services:type_name -> sorm.Service
	16, // 20: sorm.DataManagementResponse.details:type_name -> google.protobuf.Any
	4,  // 21: sorm.UserDataManagement.RegisterUser:input_type -> sorm.RegisterUserRequest
	5,  // 22: sorm.UserDataManagement.LoginUser:input_type -> sorm.LoginUserRequest
	6,  // 23: sorm.UserDataManagement.LogoutUser:input_type -> sorm.LogoutUserRequest
	7,  // 24: sorm.UserDataManagement.DeleteUserAccount:input_type -> sorm.DeleteUserAccountRequest
	8,  // 25: sorm.UserDataManagement.UpdateUserData:input_type -> sorm.UpdateUserDataRequest
	9,  // 26: sorm.UserDataManagement.DeleteUserAccountAdmin:input_type -> sorm.DeleteUserAccountAdminRequest
	10, // 27: sorm.UserDataManagement.UpdateUserDataAdmin:input_type -> sorm.UpdateUserDataAdminRequest
	11, // 28: sorm.UserDataManagement.DeleteAccount:input_type -> sorm.DeleteAccountRequest
	12, // 29: sorm.UserDataManagement.UserAccountRecovery:input_type -> sorm.UserAccountRecoveryRequest
	14, // 30: sorm.UserDataManagement.DirectoryData:input_type -> sorm.DirectoryDataRequest
	15, // 31: sorm.UserDataManagement.RegisterUser:output_type -> sorm.DataManagementResponse
	15, // 32: sorm.UserDataManagement.LoginUser:output_type -> sorm.DataManagementResponse
	15, // 33: sorm.UserDataManagement.LogoutUser:output_type -> sorm.DataManagementResponse
	15, // 34: sorm.UserDataManagement.DeleteUserAccount:output_type -> sorm.DataManagementResponse
	15, // 35: sorm.UserDataManagement.UpdateUserData:output_type -> sorm.DataManagementResponse
	15, // 36: sorm.UserDataManagement.DeleteUserAccountAdmin:output_type -> sorm.DataManagementResponse
	15, // 37: sorm.UserDataManagement.UpdateUserDataAdmin:output_type -> sorm.DataManagementResponse
	15, // 38: sorm.UserDataManagement.DeleteAccount:output_type -> sorm.DataManagementResponse
	15, // 39: sorm.UserDataManagement.UserAccountRecovery:output_type -> sorm.DataManagementResponse
	15, // 40: sorm.UserDataManagement.DirectoryData:output_type -> sorm.DataManagementResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_sorm_proto_init() }
func file_sorm_proto_init() {
	if File_sorm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sorm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msisdn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Add); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserAccountAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDataAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountRecoveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sorm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataManagementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sorm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sorm_proto_goTypes,
		DependencyIndexes: file_sorm_proto_depIdxs,
		MessageInfos:      file_sorm_proto_msgTypes,
	}.Build()
	File_sorm_proto = out.File
	file_sorm_proto_rawDesc = nil
	file_sorm_proto_goTypes = nil
	file_sorm_proto_depIdxs = nil
}
